{
    "summary": "The functional component fetches and displays information about neurons, using state variables and hooks to manage data. It organizes the displayed connections in a visually pleasing format and shows related neurons based on user-selected neuron, fetching similar ones in upstream and downstream sections with a loading animation while data is fetched, showing up to 3 related neurons for each section using NeuronInfo component.",
    "details": [
        {
            "comment": "Importing necessary modules and defining a functional component for displaying neuron information.\nState variable \"info\" is set to null initially using useState hook.\nuseEffect hook is used to fetch the explanation data when the component mounts.\nIf info is not available, a loading indicator is displayed.\nWhen info is available, the neuron information is rendered within a div element.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/similarNeurons.jsx\":0-39",
            "content": "import React, { useEffect, useState } from \"react\"\nimport _ from \"lodash\"\nimport { Link } from \"react-router-dom\"\nimport { get_explanations, get_top_neuron_connections } from \"../interpAPI\"\nfunction NeuronInfo({ neuron, strength }) {\n  const [info, setInfo] = useState(null)\n  useEffect(() => {\n    async function fetchInfo() {\n      const result = (await get_explanations({\n        layer: neuron.layer,\n        neuron: neuron.neuron,\n      }))\n      setInfo(result)\n    }\n    if (!info) {\n      fetchInfo()\n    }\n  }, [])\n  if (!info) {\n    return (\n      <div className=\"m-4 flex justify-center items-center h-32\">\n        <p className=\"text-gray-500 mb-2\">\n          Loading neuron {neuron.layer}:{neuron.neuron}...\n        </p>\n        <div className=\"w-8 h-8 border-4 border-gray-300 rounded-full animate-spin\"></div>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <div className=\"overflow-hidden mb-4 border rounded-lg bg-white shadow\">\n        <h3\n          className=\"px-4 text-lg pb-0 mb-0 font-bold\">\n          <Link to={`/layers/${neuron.layer}/neurons/${neuron.neuron}`}>"
        },
        {
            "comment": "Code snippet displays information about similar neurons, their connection strength and scored explanations for a given activeNeuron. It fetches data using the 'get_top_neuron_connections' function and renders it in a visually formatted way. The state variables 'similarNeurons', 'isLoading' are managed with useState hook, and the useEffect hook is used to fetch similar neurons data when the activeNeuron prop changes.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/similarNeurons.jsx\":40-71",
            "content": "          Neuron {neuron.layer}:{neuron.neuron}\n          </Link>\n        </h3>\n        <div className=\"text-sm px-4 py-2\">\n        Connection strength: {strength.toFixed(2)}\n        </div>\n        <blockquote className=\"p-1 px-4 mx-1 my-0\">\n          {info.scored_explanations.map((explanation, i) => (\n            <React.Fragment key={i}>\n            <p className=\"py-1\">\n              <em>{explanation.explanation}</em>\n            </p>\n            <p className=\"py-1\">\n              <em>score: {explanation.scored_simulation.ev_correlation_score.toFixed(2)}</em>\n            </p>\n            </React.Fragment>\n          ))}\n        </blockquote>\n      </div>\n    </div>\n  )\n}\nexport default function SimilarNeurons({ activeNeuron: neuron }) {\n  const [similarNeurons, setSimilarNeurons] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  useEffect(() => {\n    async function fetchSimilarNeurons() {\n      const result = await get_top_neuron_connections(neuron)\n      setSimilarNeurons(result)\n      setIsLoading(false)"
        },
        {
            "comment": "Functionality: Displays related neurons based on user-selected neuron\n\nCode explanation:\n- If a user selects a neuron, fetch the similar neurons and display them in two sections - upstream and downstream.\n- Show a loading animation while data is fetched.\n- Display up to 3 related neurons for each section (upstream and downstream).\n- Use NeuronInfo component to represent each displayed neuron.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/similarNeurons.jsx\":72-104",
            "content": "    }\n    fetchSimilarNeurons()\n  }, [neuron])\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"w-8 h-8 border-4 border-gray-300 rounded-full animate-spin\"></div>\n      </div>\n    )\n  }\n  const n_show = 3;\n  return (\n    <div className=\"min-w-0 flex-1\">\n      <h2 className=\"text-2xl font-bold mb-4\">Related neurons</h2>\n      <div className=\"full-width mt-6\">\n        <div className=\"flex flow-row justify-center align-self-center\">\n          {\n          similarNeurons.input ?\n          <div style={{ width: 450 }} className=\"mx-2\">\n            <h5>Upstream</h5>\n            <div className=\"flex flex-row flex-wrap\">\n              {similarNeurons.input.slice(0, n_show).map(([layer, neuron, strength]) => (\n                <NeuronInfo key={layer + neuron} neuron={{ layer, neuron }} strength={strength} />\n              ))}\n            </div>\n          </div> : null\n          }\n          {\n          similarNeurons.output ?\n          <div style={{ width: 450 }} className=\"mx-2\">"
        },
        {
            "comment": "Rendering a list of downstream neurons for the selected neuron, up to n_show.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/similarNeurons.jsx\":105-117",
            "content": "            <h5>Downstream</h5>\n            <div className=\"flex flex-row flex-wrap\">\n              {similarNeurons.output.slice(0, n_show).map(([layer, neuron, strength]) => (\n                <NeuronInfo key={layer + neuron} neuron={{ layer, neuron }} strength={strength}/>\n              ))}\n            </div>\n          </div> : null\n          }\n        </div>\n      </div>\n    </div>\n  )\n}"
        }
    ]
}