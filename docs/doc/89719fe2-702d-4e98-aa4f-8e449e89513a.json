{
    "summary": "The code imports React, fetches token data from an API, renders loading indicator, displays tokens with interactive elements and tooltips, limited to 20 input tokens, and formats the tokens in rounded-full boxes with red text color.",
    "details": [
        {
            "comment": "This code imports React and two useState/useEffect hooks. It defines a TokenDisplay component that fetches related tokens data from an interpAPI endpoint based on the activeNeuron prop. It checks if the data is loaded, displays a loading indicator if not, and renders mean-activation-based token information when done loading.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/topTokens.jsx\":0-40",
            "content": "import React, { useState, useEffect } from \"react\"\nimport { get_top_tokens } from \"../interpAPI\"\nconst TokenDisplay = ({ activeNeuron }) => {\n  const [isLoading, setIsLoading] = useState(true)\n  const [data, setData] = useState(null)\n  const loadTokens = async () => {\n    setIsLoading(true)\n    const weightStrengths = await get_top_tokens(activeNeuron, 'weight')\n    const activationStrengths = await get_top_tokens(activeNeuron, 'activation')\n    const data = {\n      activeNeuron,\n      weightStrengths,\n      activationStrengths,\n    }\n    setData(data)\n    setIsLoading(false)\n  }\n  useEffect(() => {\n    if (!data) {\n      loadTokens()\n    }\n  }, [])\n  return (\n    <div className=\"min-w-0 flex-1\">\n      <h2 className=\"text-2xl font-bold mb-4\">Related tokens</h2>\n      {isLoading ? (\n        <div className=\"flex justify-center items-center\">\n          <div className=\"loader\">loading tokens</div>\n        </div>\n      ) : (\n        <>\n          <h3 className=\"text-md font-bold mb-4\">Mean-activation-based</h3>\n          <div className=\"mt-2 text-sm text-gray-700\">"
        },
        {
            "comment": "The code is mapping over tokens based on activation strengths and weight strengths to display them as interactive elements with their respective strength values. It also includes a limit of 20 input tokens for the weight-based section.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/topTokens.jsx\":41-62",
            "content": "            {data.activationStrengths.tokens.map((token, idx) => {\n              return (\n                data.activationStrengths.average_activations[idx] === null ? null :\n                <span\n                  key={idx}\n                  title={`Strength: ${data.activationStrengths.average_activations[idx].toFixed(2)}`}\n                  className=\"inline-flex m-1 items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\"\n                >\n                  {token}\n                </span>\n              )\n            })}\n          </div>\n          <h3 className=\"text-md font-bold mb-4\">Weight-based</h3>\n          <div className=\"mt-2 text-sm text-gray-700\">\n            <p>Input tokens:</p>\n            {data.weightStrengths.input_positive.tokens.slice(0, 20).map((token, idx) => {\n              return (\n                data.weightStrengths.input_positive.strengths[idx] === null ? null :\n                <span\n                  key={idx}\n                  title={`Strength: ${data.weightStrengths.input_positive.strengths[idx].toFixed(2)}`}"
        },
        {
            "comment": "This code maps over input tokens and displays them with a specific styling. It also handles the strength values of each token for negative inputs, displaying them only if they are not null and showing the title with the respective strength value when hovered over.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/topTokens.jsx\":63-87",
            "content": "                  className=\"inline-flex m-1 items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\"\n                >\n                  {token}\n                </span>\n              )\n            })}\n          </div>\n          {\n          <div className=\"mt-2 text-sm text-gray-700\">\n            <p>Input tokens negative:</p>\n            {data.weightStrengths.input_negative.tokens.slice(0, 20).map((token, idx) => {\n              return (\n                data.weightStrengths.input_negative.strengths[idx] === null ? null :\n                <span\n                  key={idx}\n                  title={`Strength: ${data.weightStrengths.input_negative.strengths[idx].toFixed(2)}`}\n                  className=\"inline-flex m-1 items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 text-red-800\"\n                >\n                  {token}\n                </span>\n              )\n            })}\n          </div>\n          }\n          <div className=\"mt-2 text-sm text-gray-700\">"
        },
        {
            "comment": "Output tokens section:\nIterates over top 20 output positive tokens and displays with strength information in tooltip.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/topTokens.jsx\":88-110",
            "content": "            <p>Output tokens:</p>\n            {data.weightStrengths.output_positive.tokens.slice(0, 20).map((token, idx) => {\n              return (\n                data.weightStrengths.output_positive.strengths[idx] === null ? null :\n                <span\n                  key={idx}\n                  title={`Strength: ${data.weightStrengths.output_positive.strengths[idx].toFixed(2)}`}\n                  className=\"inline-flex m-1 items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\"\n                >\n                  {token}\n                </span>\n              )\n            })}\n          </div>\n          {\n          <div className=\"mt-2 text-sm text-gray-700\">\n            <p>Output tokens negative:</p>\n            {data.weightStrengths.output_negative.tokens.slice(0, 20).map((token, idx) => {\n              return (\n                <span\n                  key={idx}\n                  title={`Strength: ${data.weightStrengths.output_negative.strengths[idx].toFixed(2)}`}\n     "
        },
        {
            "comment": "This code is rendering a div containing tokens in an array. The tokens are displayed within rounded-full text boxes with red text color.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/topTokens.jsx\":110-123",
            "content": "             className=\"inline-flex m-1 items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800 text-red-800\"\n                >\n                  {token}\n                </span>\n              )\n            })}\n          </div>\n          }\n        </>\n      )}\n    </div>\n  )\n}\nexport default TokenDisplay"
        }
    ]
}