{
    "summary": "This code defines functions for color interpolation and normalization of activation values. It flattens, scales, and normalizes data using imported types, with a function to interpolate colors between two given colors based on a ratio, and default color and boundary values provided.",
    "details": [
        {
            "comment": "This code imports necessary functions and defines types for neuron, token and activation data. It then creates a function normalizeTokenActs that takes in multiple sequences of tokens and their activations, flattens them into one array, replaces any negative activations with 0, finds the maximum activation value across all sequences, and scales the data to be between 0 and 1 for colorization purposes.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/types.ts\":0-30",
            "content": "import { scaleLinear } from \"d3-scale\"\nimport { min, max, flatten } from \"lodash\"\nexport type Neuron = {\n  layer: number;\n  neuron: number;\n}\nexport type TokenAndActivation = {\n  token: string,\n  activation: number\n  normalized_activation?: number\n}\nexport type TokenSequence = TokenAndActivation[]\nexport const normalizeTokenActs = (...sequences: TokenSequence[][]) => {\n  // console.log('sequences', sequences)\n  let flattened: TokenAndActivation[] = flatten(flatten(sequences))\n  // Replace all activations less than 0 in data.tokens with 0. This matches the format in the\n  // top + random activation records displayed in the main grid.\n  flattened = flattened.map(({token, activation}) => {\n    return {\n      token,\n      activation: Math.max(activation, 0)\n    }\n  })\n  const maxActivation = max(flattened.map((ta) => ta.activation)) || 0;\n  const neuronScale = scaleLinear()\n    // Even though we're only displaying positive activations, we still need to scale in a way that\n    // accounts for the existence of negative activations, since our color scale includes them."
        },
        {
            "comment": "This code defines functions for color interpolation and normalization of activation values in sequences. It also exports a Color type which represents RGB colors, with each component ranging from 0 to 255. The \"interpolateColor\" function takes three parameters: two colors (left and right) and a value between 0 and 1, representing the position on a gradient between the left and right colors. It calculates the new color based on the interpolation of the RGB components between these two colors. The \"getInterpolatedColor\" function uses color boundaries to determine the appropriate color for a given value by finding the index of the boundary and using it to choose the appropriate color from the predefined colors array.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/types.ts\":31-58",
            "content": "    .domain([0, maxActivation])\n    .range([0, 1])\n  return sequences.map((seq) => seq.map((tas) => tas.map(({ token, activation }) => ({\n      token,\n      activation,\n      normalized_activation: neuronScale(activation),\n  }))))\n}\nexport type Color = {r: number, g: number, b: number};\nexport function interpolateColor(color_l: Color, color_r: Color, value: number) {\n  const color = {\n    r: Math.round(color_l.r + (color_r.r - color_l.r) * value),\n    g: Math.round(color_l.g + (color_r.g - color_l.g) * value),\n    b: Math.round(color_l.b + (color_r.b - color_l.b) * value),\n  }\n  return color\n}\nexport function getInterpolatedColor(colors: Color[], boundaries: number[], value: number) {\n  const index = boundaries.findIndex((boundary) => boundary >= value)\n  const colorIndex = Math.max(0, index - 1)\n  const color_left = colors[colorIndex]\n  const color_right = colors[colorIndex + 1]\n  const boundary_left = boundaries[colorIndex]\n  const boundary_right = boundaries[colorIndex + 1]\n  const ratio = (value - boundary_left) / (boundary_right - boundary_left)"
        },
        {
            "comment": "This code defines a function to interpolate colors between two given colors based on a ratio, and provides default color and boundary values.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/types.ts\":59-71",
            "content": "  const color = interpolateColor(color_left, color_right, ratio)\n  return color\n}\nexport const DEFAULT_COLORS = [\n  // { r: 255, g: 0, b: 105 },\n  { r: 255, g: 255, b: 255 },\n  { r: 0, g: 255, b: 0 },\n]\nexport const DEFAULT_BOUNDARIES = [\n  // 0, 0.5, 1\n  0, 1\n]"
        }
    ]
}