{
    "summary": "The code imports React, creates a component with loading and toggle switch, and displays top 5 or remaining sequences based on toggle value in the interface.",
    "details": [
        {
            "comment": "Code imports React and related hooks, defines utility functions for zipping simulated and real sequences, and sets up state variables and a function to load explanations.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/explanation.jsx\":0-32",
            "content": "import React, { useState, useEffect } from \"react\"\nimport { get_explanations } from \"../interpAPI\"\n// import HeatmapGrid from \"../heatmapGrid\"\nimport SimulationHeatmap from \"../simulationHeatmap\"\nimport { normalizeTokenActs } from \"../types\"\nfunction zip_simulated_sequences(sequences) {\n  return sequences.map(({ simulation }) => {\n    return simulation.tokens.map((token, idx) => ({\n      token,\n      activation: simulation.expected_activations[idx],\n    }))\n  })\n}\nfunction zip_real_sequences(sequences) {\n  return sequences.map(({ simulation, true_activations }) => {\n    return simulation.tokens.map((token, idx) => ({\n      token,\n      activation: true_activations[idx],\n    }))\n  })\n}\nconst ExplanationDisplay = ({ activeNeuron }) => {\n  const [isLoading, setIsLoading] = useState(true)\n  const [data, setData] = useState(null)\n  const [showingScoringDetails, setShowingScoringDetails] = useState(false)\n  const [toggle, setToggle] = useState(false);\n  const loadExplanation = async () => {\n    const result = await get_explanations(activeNeuron);"
        },
        {
            "comment": "This code is setting up data and handling loading of explanation, normalizing token actions, and providing a suggestion link for further explanation. It uses useEffect to check if there's data available and loads the explanation if not. It also calculates simulated and real sequences based on the data provided, and creates a suggestion link to provide more information about the neuron.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/explanation.jsx\":33-66",
            "content": "    setData(result.scored_explanations[0])\n    setIsLoading(false)\n  }\n  useEffect(() => {\n    if (!data) {\n      loadExplanation()\n    }\n  }, [])\n  const handleToggleChange = () => {\n    setToggle(!toggle);\n  };\n  let sim_sequences;\n  if (data) {\n    sim_sequences = zip_simulated_sequences(data.scored_simulation.scored_sequence_simulations);\n    [sim_sequences] = normalizeTokenActs(sim_sequences)\n  } else {\n    sim_sequences = []\n  }\n  let real_sequences;\n  if (data) {\n    real_sequences = zip_real_sequences(data.scored_simulation.scored_sequence_simulations);\n    [real_sequences] = normalizeTokenActs(real_sequences)\n  } else {\n    real_sequences = []\n  }\n  const suggest_explanation_link = \"https://docs.google.com/forms/d/e/1FAIpQLSckMyDQedGhdISIqaqn0YGUtd2xqEWgPu7ehoPUTT2pTge_-g/viewform?\"\n    + `usp=pp_url&entry.541490611=${activeNeuron.layer}`\n    + `&entry.1688855196=${activeNeuron.neuron}`\n    + `&entry.495312202=https://openaipublic.blob.core.windows.net/neuron-explainer/neuron-viewer/index.html%23/layers/${activeNeuron.layer}/neurons/${activeNeuron.neuron}`;"
        },
        {
            "comment": "This code represents a component in a React application that displays an explanation, along with the option to suggest a better one and toggle scoring details. The explanation is stored in 'data' prop, and a loading state is shown when 'isLoading' is true.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/explanation.jsx\":68-95",
            "content": "  return (\n    <>\n      <div className=\"min-w-0 flex-1\">\n        <h2 className=\"text-2xl font-bold mb-4\">Explanation</h2>\n        {isLoading ? (\n          <div className=\"flex justify-center items-center\">\n            <div className=\"loader\">Loading...</div>\n          </div>\n        ) : (\n          <>\n            <blockquote className=\"p-1 px-4 mx-1 my-0\">\n              <p className=\"py-1\">\n                <em>{data.explanation}</em>\n              </p>\n              <p className=\"py-1\">\n                <em>score: {data.scored_simulation.ev_correlation_score.toFixed(2)}</em>\n              </p>\n              <p className=\"py-1\">\n                <a href={suggest_explanation_link}>Suggest Better Explanation</a>\n              </p>\n            </blockquote>\n            <button onClick={() => { setShowingScoringDetails(!showingScoringDetails) }}>\n              {showingScoringDetails ? 'Hide' : 'Show'} scoring details\n            </button>\n            {\n              showingScoringDetails ?\n                <>\n                  <div"
        },
        {
            "comment": "This code represents a toggle switch with a checkbox input. The toggle's background color changes based on its state (checked or not).",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/explanation.jsx\":96-122",
            "content": "                    style={{\n                      textAlign: 'right',\n                    }}\n                  >\n                    <div\n                      style={{\n                        display: 'inline-block',\n                        position: 'relative',\n                        width: '60px',\n                        height: '34px',\n                        marginLeft: '10px',\n                        marginBottom: '5px',\n                        borderRadius: '34px',\n                        backgroundColor: toggle ? '#0A978B' : '#CCC',\n                        cursor: 'pointer',\n                        transition: 'background-color 0.2s',\n                      }}\n                    >\n                      <input\n                        type=\"checkbox\"\n                        id=\"toggle\"\n                        checked={toggle}\n                        onChange={handleToggleChange}\n                        style={{\n                          width: '100%',\n                          height: '100%',\n                          margin: '0',"
        },
        {
            "comment": "A toggle switch and text indicating whether activations are overlaid or not, with a heatmap visualization below.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/explanation.jsx\":123-146",
            "content": "                          opacity: '0',\n                          cursor: 'pointer',\n                        }}\n                      />\n                      <span\n                        onClick={handleToggleChange}\n                        style={{\n                          position: 'absolute',\n                          top: '2px',\n                          left: toggle ? '29px' : '2px',\n                          width: '30px',\n                          height: '30px',\n                          backgroundColor: 'white',\n                          borderRadius: '50%',\n                          boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)',\n                          transition: 'left 0.2s',\n                        }}\n                      ></span>\n                    </div>\n                    <br />\n                    {toggle ? 'Activations overlaid (top = real, bottom = simulated)' : 'Activations not overlaid'}\n                  </div>\n                  <h3 className=\"text-md font-bold\">Top</h3>\n                  <SimulationHeatmap"
        },
        {
            "comment": "This code renders two SimulationHeatmap components, one for the top 5 real and simulated sequences, and another for the remaining real and simulated sequences. The toggle value determines if overlay activations should be displayed.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/explanation.jsx\":147-166",
            "content": "                    sequences={real_sequences.slice(0, 5)}\n                    simulated_sequences={sim_sequences.slice(0, 5)}\n                    overlay_activations={toggle}\n                  />\n                  <h3 className=\"text-md font-bold\">Random</h3>\n                  <SimulationHeatmap\n                    sequences={real_sequences.slice(5)}\n                    simulated_sequences={sim_sequences.slice(5)}\n                    overlay_activations={toggle}\n                  />\n                </> : null\n            }\n          </>\n        )}\n      </div>\n    </>\n  )\n}\nexport default ExplanationDisplay"
        }
    ]
}