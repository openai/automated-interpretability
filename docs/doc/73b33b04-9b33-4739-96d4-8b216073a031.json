{
    "summary": "The code imports components, generates sequence lists, fetches and displays data, normalizes sequences of activations, renders them with labels, provides a button for data visibility, and allows users to visualize heatmaps through iterating slices of data.",
    "details": [
        {
            "comment": "Importing HeatmapGrid component and React, useState, and useEffect hooks from 'react'. Defining a zip_sequences function that takes in sequences as input. Exporting a default functional component that takes an activeNeuron prop. Inside the component, setting up state variables for data, showingMore, and isLoading using useState hook. Using the useEffect hook to fetch data when the component mounts or if there's a change in the activeNeuron prop. The fetched data is then used to create all_sequences array, which contains objects with label, sequences, and default_show properties.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/datasetList.jsx\":0-35",
            "content": "import HeatmapGrid from \"../heatmapGrid\"\nimport React, { useEffect, useState } from \"react\"\nimport { normalizeTokenActs } from \"../types\"\nimport {get_neuron_record} from \"../interpAPI\"\nfunction zip_sequences(sequences) {\n  return sequences.map(({ activations, tokens }) => {\n    return tokens.map((token, idx) => ({\n      token,\n      activation: activations[idx],\n    }))\n  })\n}\nexport default ({ activeNeuron }) => {\n  const [data, setData] = useState(null)\n  const [showingMore, setShowingMore] = useState({})\n  const [isLoading, setIsLoading] = useState(true)\n  useEffect(() => {\n    async function fetchData() {\n      if (data) {\n        return\n      }\n      const result = await get_neuron_record(activeNeuron)\n    console.log(result)\n      const all_sequences = []\n      all_sequences.push({\n        // label: '[0.999, 1] (Top quantile, sorted.  50 of 50000)',\n        label: 'Top',\n        sequences: zip_sequences(result.most_positive_activation_records),\n        default_show: 4,\n      })\n      all_sequences.push({\n        label: 'Quantile range [0.99, 0.999] sample',"
        },
        {
            "comment": "This code generates a list of sequences for different quantile ranges and a random sample. It adds these sequences to the all_sequences array, which will be used later in the program. The intervals used here are defined as a reference.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/datasetList.jsx\":36-62",
            "content": "        sequences: zip_sequences(result.random_sample_by_quantile[3]),\n        default_show: 1,\n      })\n      all_sequences.push({\n        label: 'Quantile range [0.9, 0.99] sample',\n        sequences: zip_sequences(result.random_sample_by_quantile[2]),\n        default_show: 1,\n      })\n      all_sequences.push({\n        label: 'Quantile range [0.5, 0.9] sample',\n        sequences: zip_sequences(result.random_sample_by_quantile[1]),\n        default_show: 1,\n      })\n      all_sequences.push({\n        label: 'Quantile range [0, 0.5] sample',\n        sequences: zip_sequences(result.random_sample_by_quantile[0]),\n        default_show: 1,\n      })\n      all_sequences.push({\n        // label: '[0, 1] (Random)',\n        label: 'Random sample',\n        sequences: zip_sequences(result.random_sample),\n        default_show: 2,\n      })\n      // for reference\n      // intervals = [(0, 1), (0, 0.5), (0.5, 0.9), (0.9, 0.99), (0.99, 0.999), (0.999, 1)]\n      // saved_activations_by_interval = [neuron_record.random_sample] + neuron_record.random_sample_by_decile[:-1] + [neuron_record.top_activations]"
        },
        {
            "comment": "This code fetches data for a dataset and displays it in a loading state until the data is available. It then normalizes the sequences of activations and renders them with their labels. A button allows users to show more or less of the data depending on the label.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/datasetList.jsx\":63-93",
            "content": "      setData(all_sequences)\n      setIsLoading(false)\n    }\n    fetchData()\n  }, [activeNeuron])\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <div className=\"w-8 h-8 border-4 border-gray-300 rounded-full animate-spin\"></div>\n        <div>loading top dataset examples</div>\n      </div>\n    )\n  }\n  // const activations = data.top_activations;\n  const all_normalized_sequences = normalizeTokenActs(...data.map(({sequences}) => sequences))\n  return (\n    <div>\n      <h2 className=\"text-2xl font-bold mb-4\">Activations</h2>\n      {\n        data.map(({label, default_show}, idx) => {\n          const n_show = showingMore[label] ? all_normalized_sequences[idx].length : default_show;\n          return (\n          <React.Fragment key={idx}>\n          <h3 className=\"text-md font-bold\">\n            {label}\n            <button className=\"ml-2 text-sm text-gray-500\"\n              onClick={() => setShowingMore({...showingMore, [label]: !showingMore[label]})}>\n              {showingMore[label] ? 'show less' : 'show more'}"
        },
        {
            "comment": "Iterating through slices of data to display heatmaps.",
            "location": "\"/media/root/Toshiba XG3/works/automated-interpretability/docs/src/neuron-viewer/src/panes/datasetList.jsx\":94-103",
            "content": "            </button>\n          </h3>\n          <HeatmapGrid allTokens={all_normalized_sequences[idx].slice(0, n_show)} />\n          </React.Fragment>\n          )\n        })\n      }\n    </div>\n  )\n}"
        }
    ]
}